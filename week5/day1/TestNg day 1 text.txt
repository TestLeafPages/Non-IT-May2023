Today's Agenda
---------------
TestNG
-------
Test execution framework
java-junit
pyhton-pyunit

1.Has the feature to perform sequential test execution -one by one .xml
2.has the feature to perform parallel text execution.at same time.parallel
3.Gives test execution status(pass/fail)
4.Gives test execution summary report(Html report)
index.html
5.Supports data driven-To execute test with multiple data.
6.Supports the cross browser testing
7.Control the testExecution with annotations and attributes
8.Assertions to perform validations and verifications
9.Automatic retry of failed test cases
TestNG pre installation
-------------------------
1.dependency
2.testNGplugin  ---org.testNg


Test cases
----------
1.CreateLead
2.EditLead
3.DeleteLead
4.DuplicateLead
5.MergeLead
Step:Remove the main method 
Remove the static keyword
String[]arg

Attribute
---------
verbose----log will print inside the console
default---2log
0-10
thread-count="5"
Verbose - Enable Logs
Purpose of verbose is to enable Testng Logs and it will be usefull to debug the failed
testng tests. 

Range: 1 to 10 (Default: 2)
-----------------------------------------
Reporting - index.html 
Annotations and Hierarchy
Real-time usecases for Annotations
Attributes for Annotations
Real-time usecases for Attributes

-- You do not have write a code --> it is more of a configuration !!

https://testng.org/doc/ --> Official Website
Book --> Cedric --> Send it in whatsapp !!
https://github.com/cbeust/testng --> Original source code

Test case --> document that describe the test objective, test steps and expected result
1483 --> 180+ automate 

Each test case --> 4 to 5 minutes --> 200 tests --> 800 to 1000 minutes --> 

1) Executing one by one manually is not effecient --> Single click --> multiple test 

TestNg --> test runner framework --> helps me to run my tests in specific style
Junit --> First Java unit testing framework --> TestNg was built for missing features
Built in Java --> Opensource 

Design XML

1) Convert the test cases from main method to Testng Methods (using @Test and removing main static)
2) Select the testcases that you like to run and convert to XML


Suite ---> All the tests together under one bucket !! 
Test ---> Group of testcases of same module like Leads, Contacts, Opportunities
Class ---> Java Class (every .java file)
Method ---> Every Java method that has @Test annotation --> testcase !!


Style

1) Sequential ---> Run each test case after the other 
2) Parallel --> Run multiple tests in parallel 

Report

-- Eclipse specific test execution report 
-- Html report (test-output /  index.html)


Annotations 

-- 

File types: class, interface, annotation, enum !!

@BeforeSuite
    @BeforeTest
        @BeforeClass
            @BeforeMethod
                @Test (Mandatory)
            @AfterMethod
        @AfterClass
    @AfterTest
@AfterSuite


Out of the above, only @Test is mandatory annotation for TestNg and all others are optional.

@BeforeGroups, @AfterGroups 
_________________________________________________________________________________________
Before Suite  --> Before running all the test cases in the XML file 

Real-time usecases: 

1) Create a database connection for querying data 
(Only once required for entire test suite)

2) Create the HTML reporting file with date

_________________________________________________________________________________________
Before Test  --> Before running every module (set of test cases per module)

Real-time usecase: Set the module name for reporting purposes
(Only once required for entire module)

_________________________________________________________________________________________
Before Class  --> Before running every class (a java class)

Real-time usecase: Set the author name for java class for reporting purposes
(Only once required for entire java class)

_________________________________________________________________________________________
Before Method  --> Before running every test case (before @Test method)

Real-time usecase: Launch the browser, login to application
(Only once required before @Test)

